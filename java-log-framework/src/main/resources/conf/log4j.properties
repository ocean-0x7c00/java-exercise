# 只要log4j的配置文件名为log4j.properties且该配置文件在类根路径下，
# 则程序可自动加载该配置文件，不用写任何代码，log4j就会初试化

#配置根Logger log4j.rootLogger  = [ level ],appenderName1
#默认会有一个root-logger（根 - 日志记录器）的存在，
# 所有的其他日志记录器都会默认继承它的配置。
log4j.rootLogger=DEBUG,appender1

#配置日志信息输出目的地Appender
#org.apache.log4j.ConsoleAppender（控制台），
#org.apache.log4j.FileAppender（文件），
#org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件），
#org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件），
#org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）
log4j.appender.appender1=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.Target = System.out
log4j.appender.stdout.layout = org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern =  %d{ABSOLUTE} %5p %c{ 1 }:%L - %m%n

#配置日志信息的格式（布局）
#参考链接 https://www.jianshu.com/p/638b4e2c4068
#%m   输出代码中指定的消息
#%p   输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL 
#%r   输出自应用启动到输出该log信息耗费的毫秒数 
#%c   输出所属的类目，通常就是所在类的全名 
#%t   输出产生该日志事件的线程名 
#%n   输出一个回车换行符，Windows平台为“\r\n”，Unix平台为“\n” 
#%d   输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss , SSS}，输出类似：2002年10月18日  22 ： 10 ： 28 ， 921  
#%l   输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java: 10 ) 
log4j.appender.appender1.layout=org.apache.log4j.SimpleLayout